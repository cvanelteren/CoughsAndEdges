* How To Model a Disease?
The SIR  model is one  of the  simplest models to  study the
dynamics of a  disease. In this model,  the complex kinetics
or particles  are ignore. Instead,  a disease is  modeled by
considering   the  rates   between   different  stages.   In
particular, the SIR model consists of the transition between

$$ Susceptible \to Infected \to Recovered$$

The population  on this change  is dependent on the  rate of
change that transforms, say,  a susceptible individual to an
infected individual. The model assumes that the transmission
only  depends  on  the  contact rate  between  infected  and
susceptible. Recovered individuals are immune to the disease
and cannot transmit  the disease. The rate of  change from a
susceptible   individual  to   an  infected   individual  is
dependent  on  three  things:  the  rate  of  contact  between
susceptible  and infected,  the probability  of an  infected
individual transmitting  the disease to  another individual,
and  the  recovery  rate  of  an  individual.  The  rate  of
infection  is  often  denoted  as $\beta$,  and  the  rate  over
recovery is often $\gamma$.

* Population dynamics
Before  we introduce  complicated dynamics,  it warrants  to
explore the dynamics of the  simple model. Let's assume we a
have population  of size $N$  that remains fixed  over time.
That is,  $\frac{d}{dt} N =  0$ and  $N = S  + I +  R$ where
$S,I,R$  denotes   the  number   of  individuals   that  are
susceptible,  infected, and  recovered respectively.  Can we
get  an  expression that  tells  us  how a  disease  spreads
through society? It turns out we can!

If we think about the three  populations, we see that $S$ is
only dependent  on $I$, in turn  $I$ depends on $S$  and $I$
itself. Lastly, $R$  is only determined by  $I$. Let's first
focus on $S$.  The change of dynamics as a  function of time
(denoted by $\frac{d}{dt}S$) is determined  by 1 thing and 1
thing only:  the rate of  infection of $I$  population. That
is, the dynamics of the $S$ compartment depends on how often
$S$s  are in  contact  with  $I$ and  how  well the  disease
/turns/ $S$  into $I$. Or in  other words we can  write that
the change of $S$ is described by

$$ \frac{d}{dt} S = -\beta S(t) I(t).$$

The interaction $S(t)I(t)$ tells us that the dynamics of $S$
is proportional to  the interactions of $S$s  with $I$s. The
negative sign indicates that  our population can only shrink
-- since we have no birth/death dynamics.

When we think of the dynamics  of $I$, we can state that the
change of the number of $I$s  over time is determined by the
"gain" or "success" of the  infected people turning $S \to I$.
This rate is the same (but opposite) of the loss of $S \to I$.
Furthermore, the $I$ population  "shrinks" when the infected
individuals  turn  form  $I  \to  R$.  The  rate  of  loss  is
determined by $\gamma$. Taken together we can write

$$\frac{dI}{dt} = \beta S(t) I(t) - \gamma I(t).$$

Lastly,  the dynamics  of  $R$ are  only  determined by  the
"gain" of $I\to R$, which is simply

$$\frac{d}{dt} R = \gamma I(t).$$

Taken together  our system  $\sigma = \{S,  I, R\}$  is described
over time as

\begin{aligned}
\frac{d}{dt} S &= -\beta S(t) I(t) \\
\frac{d}{dt} I &= \beta S(t) I(t) - \gamma I(t)\\
\frac{d}{dt} R &= \gamma I(t)
\end{aligned}

Neat!

** But wait what is $S(t), I(t)$, and $R(t)$?
Now that  we have a  compact expression for the  dynamics of
the different compartments, we still have to determined what
these time  functions are. The systems  of equations express
the change of three  different subpopulations over time, and
are called coupled ordinary differential equations. They are
coupled since  there is  a dependency  between $S$  and $I$.
Thus, to get a solution for  the set of equation, we need to
examine these  two populations  more closely.  Implement the
analytical SIR model.

Instead of solving each equation with respect to $t$ -- which
can   be   complicated  --   we   take   advantage  of   the
interdependence.  We can  see that  the temporal  dependence
"drops"  out  by considering  the  rate  of change  for  $I$
/relative/ to $I$, that is we consider

$$\frac{\frac{d}{dt}  I(t)}{\frac{d}{dt}  S} =  \frac{\beta  S(t)
I(t) - \gamma I(t)}{-\beta S(t) I(t)}$$

which gives us

\begin{equation} \label{eq:first}
\frac{dI(t)}{dS(t)} = \frac{\gamma}{\beta}\frac{1}{S(t)}
\end{equation}

The  ratio $\frac{\gamma}{\beta}$  is often  expressed as  the *basic
reproduction number* or $R_0  = \frac{\beta}{\gamma}$ which expresses
the rate of spreading a disease to its recovery rate.

** Why is this useful?
- *Simplicity*: Instead of solving a complex system of differential equations with respect to time, we now only need to deal with a single differential equation that directly relates $I(t)$ and $S(t)$.
- *Analytical Insight*: By separating variables and integrating, we can derive an analytical relationship between $I(t)$ and $S(t)$, providing a clear picture of how these two quantities evolve relative to each other during an epidemic.
- *Reduction of Complexity*: This step simplifies the problem by reducing it from a system of time-dependent differential equations to a single, more tractable equation.

Equation cref:eq:first can solved by integration

\begin{equation} \label{eq:second}
\begin{aligned}
\int\frac{dI(t)}{dS(t)} dS(t) &= \int 1 - \frac{\gamma}{\beta}S(t)^{-1} dS(t)$
I(t) &= \frac{\gamma}{\beta} \ln S(t) - S(t) + C
\end{aligned}
\end{equation}

We now have  an expression for the time evolution  of $I$ in
terms of  $S$, however  we have introduced  another constant
factor  $C$.  This constant,  will  depend  on the  initial
conditions of our simulation. At time $t = 0$ our simulation
will   start  with   some  initial   value  for   the  three
populations. Plugging these values in gives us an expression
for $C$.

Let $S(0) = S_0, I(0) = I_0, R(0) = R_0$ with $S_0, I_0, R_0
\in \mathbb{N}$, evaluating cref:eq:second at $t=0$ will give

\begin{equation}
I_0 =  \frac{\gamma}{\beta} \ln  S_0 +  C \leftrightarrow  C =  I_0 -  S_0 + - S(t)
\frac{\gamma}{\beta} \ln S_0
\end{equation}

and thus cref:eq:first becomes

\begin{equation}
I(t) = \frac{\gamma}{\beta}\big(\ln S(t) - \ln S_0 \big) - S(t) + I_0 + S_0
\end{equation}

Let's plug in some conditions  to see if this equation makes
sense.

** The effect of $S(t)$ on $I(t)$
Assume our  susceptible population approaches zero,  then we
can see that we are only  left with $I_0$ as the $S$-related
term cancel. The negative  sign before $S(t)$ indicates that
our  population  is  decreasing  if our  pool  of  potential
infection targets decreases.

** The effect of $S_0$ on $I(t)$
Some  may  have noticed  that  our  population of  infected,
$I(t)$,  depends  on  the   initial  number  of  susceptible
individuals.  The   initial  number  of   susceptible  $S_0$,
determines how many people  can potentially be infected. The
equation becomes  consistent when  plugging in the  value of
$t=0$ -- we will be only left with $I_0$.


* !Task! implement the equations and simulate the SIR model
Given the explanation  above, implement the SIR  model as an
ODE. Make  use of  `scipy.integrate.solve_ivp` and  plot the
evolution of the SIR model as a function of time. You should
in the end have something like this

[[file:./figures/base_model.png]]

Things to try:
- How  does the  reproduction number  influence the  number of
infected people?
 - What happens when you double the infection rate?
 - What happens when you half the infection rate?


#+begin_src jupyter-python
import numpy as np, proplot as plt
from scipy.integrate import solve_ivp

def step(t, x: np.ndarray,
         beta: float,
         gamma: float,
    ) -> np.ndarray:
    s, i, r = x
    ds = -beta * s * i
    di = beta * s * i - gamma * i
    dr = gamma * i
    return np.asarray([ds, di, dr])
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
:   Cell In[1], line 6
:     gamma: float
:            ^
: SyntaxError: invalid syntax. Perhaps you forgot a comma?
:END:

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_904006/3193026665.py:21: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
:   fig.show()
#+attr_org: :width 291 :height 320
[[./.ob-jupyter/584d8ab702a5f4acc804ec7f53acdf05210c390b.png]]
:END:

** !Task! implement the SIR model and create a phase portrait
Simulate the  SIR dynamic under  different rates of  $\gamma$ and
$\beta$.  Create a  heatmap  of the  recovered population  after
$t=100$  time steps,  start  with an  initial population  of
$S_0=100$ nd $I_0 = 1$.


At the end you should have something like this
[[file:./figures/recovered.png]]

#+begin_src jupyter-python
from tqdm import tqdm
from itertools import product
gammas = np.linspace(0, 1)
betas = np.linspace(0, 1)

result = np.zeros((gammas.size, betas.size))
for idx, (gamma, beta) in tqdm(enumerate(product(gammas, betas))):
    x0 = np.array([100, 1, 0]).astype(float)
    res = solve_ivp(step,
                    t_span = (0, 100),
                    args = (beta, gamma),
                    y0 = x0
                )
    result.ravel()[idx] = res.y[-1].mean()
#+end_src

#+RESULTS:
: 2500it [00:19, 127.37it/s]


#+begin_src jupyter-python
e = [betas.min(), betas.max(), gammas.min(), gammas.max()]
fig, ax = plt.subplots()
h = ax.imshow(result,
              extent = e,
              cmap = "spectral_r",
              )

ax.colorbar(h, title = "Recovered Population")
ax.format(
    xlabel = r"Infection rate $(\beta)$",
    ylabel = r"Recovery rate $(\gamma)$",
)
fig.savefig("./figures/recovered.png")
fig.show()

#+end_src


#+begin_src jupyter-python
f = lambda t, x0, beta, gamma:  x0 * np.exp(-beta / gamma * t)

x0 = 0.9
beta = 0.01
gamma = 0.9
t = np.arange(1000)

y = f(t, x0, beta, gamma)
fig, ax = plt.subplots()
ax.plot(t, y)
fig.show()



#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_904006/1421321470.py:11: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
:   fig.show()
#+attr_org: :width 288 :height 282
[[./.ob-jupyter/9660559d76606fdae5df8d65efab2b35fa8dbc06.png]]
:END:

#+begin_src jupyter-python
from itertools import product
from tqdm import tqdm
x = np.linspace(0.01, 1, 25)
beta, gamma = x, x

x0 = np.array([0.99, 0.01, 0])
results = np.zeros((beta.size, gamma.size))
for idx, (b, g) in tqdm(enumerate(product(beta, gamma))):
    res = solve_ivp(step,
        t_span = (0, 100),
        args = (b, g),
        y0 = x0
    )
    results.ravel()[idx] = res.y[1].max()






#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[3], line 3
:       1 from itertools import product
:       2 from tqdm import tqdm
: ----> 3 x = np.linspace(0.01, 1, 25)
:       4 beta, gamma = x, x
:       6 x0 = np.array([0.99, 0.01, 0])
:
: NameError: name 'np' is not defined
:END:

#+begin_src jupyter-python
from labellines import labelLine
fig, ax = plt.subplots()
h = ax.imshow(results, origin = "lower",
              extent = [beta.min(), beta.max(),
                        gamma.min(), gamma.max()],
              vmin = 0, vmax = 1)
line, = ax.plot([0, 1], [0, 1], ls = '--', color = 'k', lw = 3)
labelLine(line, 0.5, label = r"$R_0= 1$")
ax.format(
    ylabel = r"$\beta$",
    xlabel = r"$\gamma$")
fig.colorbar(h)
fig.savefig("./figures/r_0.png", dpi = 120)
fig.show()


#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[2], line 2
      1 from labellines import labelLine
----> 2 fig, ax = plt.subplots()
      3 h = ax.imshow(results, origin = "lower",
      4               extent = [beta.min(), beta.max(),
      5                         gamma.min(), gamma.max()],
      6               vmin = 0, vmax = 1)
      7 line, = ax.plot([0, 1], [0, 1], ls = '--', color = 'k', lw = 3)

NameError: name 'plt' is not defined
#+end_example
:END:

#+begin_src jupyter-python

print(res.y.sum(0))
#+end_src

#+RESULTS:
: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
